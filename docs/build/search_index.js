var documenterSearchIndex = {"docs":
[{"location":"#AutoLM.jl-Documentation","page":"AutoLM.jl Documentation","title":"AutoLM.jl Documentation","text":"","category":"section"},{"location":"#Data-loading","page":"AutoLM.jl Documentation","title":"Data loading","text":"","category":"section"},{"location":"","page":"AutoLM.jl Documentation","title":"AutoLM.jl Documentation","text":"load_imgs(path, dims, numerical)\r\nread_landmarks(path, num_landmarks, group)","category":"page"},{"location":"#AutoLM.load_imgs-Tuple{Any,Any,Any}","page":"AutoLM.jl Documentation","title":"AutoLM.load_imgs","text":"load_imgs(path, dims)\n\nReads all the volume images of an entire directory. Data must be stored as follows: The required input \"path\" is the path to a directory containing one sub-directory for every volume that has to be read. Each sub-directory contains the images making up one volume in .tif format. if the image names contain alphabetical characters (e.g. image001.tif, image002.tif ect.) the variable \"numerical\" has to be set to false, if the image names are just numerical values (e.g 1.tif, 2.tif, 3.tif, ect), it has to be set to true. Any file not ending in .tif will not be read.\n\nData will be stored in a 4D array [a x b c x n] with n being the number of sub-directories, a and b the resolution of the .tif images and c the number of images. The the resolution of the images has to be the same over all the volumes.\n\n\n\n\n\n","category":"method"},{"location":"#AutoLM.read_landmarks-Tuple{Any,Any,Any}","page":"AutoLM.jl Documentation","title":"AutoLM.read_landmarks","text":"read_landmarks(path, num_landmarks, group)\n\nSpecific function to read avizo landmark data into an array. Reads all the files ending in .Ascii in the directory specified as \"path\". Data will be stored in a 2D array [c x n] with c being the number of individual 3D coordinates (30 coordinates in the case of 10 landmarks) and n being the number of landmark files read.\n\nThe variable Group specifies the group of landmarks in the Avizo file that has to be read (e.g \"@1\" in the case of group 1)\n\n\n\n\n\n","category":"method"},{"location":"#Data-augmentation","page":"AutoLM.jl Documentation","title":"Data augmentation","text":"","category":"section"},{"location":"","page":"AutoLM.jl Documentation","title":"AutoLM.jl Documentation","text":"flip_volume_front(x, y)\r\nflip_volume_side(x, y)\r\nmirror_vol(x, y)\r\nAutoLM.flip_2D(x, y)\r\nflip_3D(x, y)\r\njitter_3D(volumes, landmarks, padding)\r\nrotate_images(imgs, lms, deg)\r\nrotate_volumes(vols, lms, deg)","category":"page"},{"location":"#AutoLM.flip_volume_front-Tuple{Any,Any}","page":"AutoLM.jl Documentation","title":"AutoLM.flip_volume_front","text":"flip_volume_front(x, y)\n\nFlip a volume so that the longitudinal (x) axis becomes the vertical (z) axis and adjust the landmakr coordinates accordingly.\n\n\n\n\n\n","category":"method"},{"location":"#AutoLM.flip_volume_side-Tuple{Any,Any}","page":"AutoLM.jl Documentation","title":"AutoLM.flip_volume_side","text":"flip_volume_side(x, y)\n\nFlip a volume so that the lateral (y) axis becomes the vertical (z) axis and adjust the landmark coordinates accordingly.\n\n\n\n\n\n","category":"method"},{"location":"#AutoLM.mirror_vol-Tuple{Any,Any}","page":"AutoLM.jl Documentation","title":"AutoLM.mirror_vol","text":"function mirror_vol(x, y)\n\nA form of data augmentation. Mirrors a volume (exchanges x and y axis) and returns concatenation of original data and mirrored data.\n\n\n\n\n\n","category":"method"},{"location":"#AutoLM.flip_3D-Tuple{Any,Any}","page":"AutoLM.jl Documentation","title":"AutoLM.flip_3D","text":"flip_3D(x, y)\n\nTakes 3D volumes in a 4D tensor and landmark data in 2D tensor and returns the original volumes together with the flipped (clockwise) volumes, aswell as the coordinates for the original and the flipped volumes.\n\n\n\n\n\n","category":"method"},{"location":"#AutoLM.jitter_3D-Tuple{Any,Any,Any}","page":"AutoLM.jl Documentation","title":"AutoLM.jitter_3D","text":"jitter_3D(x, y)\n\nJitters around binarized volumes based on their corresponding x/y landmarks, so that the relevant object (smaller voxel value) will still be fully inside the volume but moved around randomly inside the volume.\n\n\n\n\n\n","category":"method"},{"location":"#AutoLM.rotate_images-Tuple{Any,Any,Any}","page":"AutoLM.jl Documentation","title":"AutoLM.rotate_images","text":"rotate_images(img, lms, deg)\n\nTakes a 3d tensor [res1 x res1 x n] with n images and rotates all of them in a counterclockwise direction around their center by deg degrees. Will adjust the 2d coordinates of the landmark array [coords x n]. Returns rotated images and adjusted landmarks.\n\n\n\n\n\n","category":"method"},{"location":"#AutoLM.rotate_volumes-Tuple{Any,Any,Any}","page":"AutoLM.jl Documentation","title":"AutoLM.rotate_volumes","text":"rotate_volumes(vols, lms, deg)\n\nTakes a 4d tensor [res1 x res2 x res3 x n] with n volumes and rotates all of them around their center by deg degrees. The rotation is along the z-axis, so the z-coordinates will not be affected. x- and y coordinates of the landmark array [coords x n] will be adjusted. Returns rotated volumes and adjusted landmarks.\n\n\n\n\n\n","category":"method"}]
}
